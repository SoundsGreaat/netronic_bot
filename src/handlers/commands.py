from time import sleep

from telebot import types
from telebot.types import InlineKeyboardMarkup
from utils.main_menu_buttons import main_menu, button_names, old_button_names
from config import bot, authorized_ids, user_data, process_in_progress
from database import DatabaseConnection, update_authorized_users
from handlers.authorization import authorized_only
from integrations.google_api_functions import read_credentials_from_sheet, update_commendations_mod_in_sheet, \
    approve_and_parse_to_database


@bot.message_handler(commands=['start', 'menu', 'help'])
@authorized_only(user_type='users')
def send_main_menu(message):
    with DatabaseConnection() as (conn, cursor):
        cursor.execute('''
                       SELECT name, CASE WHEN admins.employee_id IS NOT NULL THEN TRUE ELSE FALSE END
                       FROM employees
                                LEFT JOIN admins ON employees.id = admins.employee_id
                       WHERE telegram_user_id = %s
                       ''', (message.chat.id,))
        employee_name, is_admin = cursor.fetchone()
        user_first_name = f' {employee_name[0].split()[1]}' if employee_name and len(
            employee_name[0].split()) >= 2 else ''

    with open('../assets/images/netronic_logo.png', 'rb') as photo:
        bot.send_photo(message.chat.id, photo,
                       caption=f'üëã –ü—Ä–∏–≤—ñ—Ç<b>{user_first_name}</b>! –Ø —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó '
                               f'<b>Netronic</b>.'
                               f'\n–©–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?',
                       reply_markup=main_menu, parse_mode='HTML')

    if message.chat.id in authorized_ids['admins']:
        bot.send_message(message.chat.id, 'üîê –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.'
                                          '\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏:'
                                          '\n\n/update_authorized_users - –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
                                          '\n/edit_link_mode - —É–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å'
                                          '\n/temp_authorize - —Ç–∏–º—á–∞—Å–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')


@bot.message_handler(commands=['update_authorized_users'])
@authorized_only(user_type='admins')
def proceed_authorize_users(message):
    update_authorized_users(authorized_ids)
    bot.send_message(message.chat.id, '‚úîÔ∏è –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ.')


@bot.message_handler(commands=['edit_link_mode'])
@authorized_only(user_type='admins')
def toggle_admin_mode(message):
    if user_data['edit_link_mode'].get(message.chat.id):
        del user_data['edit_link_mode'][message.chat.id]
        bot.send_message(message.chat.id, 'üîì –†–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –≤–∏–º–∫–Ω–µ–Ω–æ.')
    else:
        bot.send_message(message.chat.id, 'üîê –†–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å —É–≤—ñ–º–∫–Ω–µ–Ω–æ.')
        user_data['edit_link_mode'][message.chat.id] = True


@bot.message_handler(commands=['temp_authorize'])
@authorized_only(user_type='admins')
def temp_authorize_user(message):
    process_in_progress[message.chat.id] = 'temp_authorization'
    bot.send_message(message.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏.')


@bot.message_handler(commands=['mass_message'])
@authorized_only(user_type='admins')
def send_mass_message(message):
    process_in_progress[message.chat.id] = 'mass_message'
    bot.send_message(message.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏.')


@bot.message_handler(commands=['remind_password'])
@authorized_only(user_type='users')
def remind_password(message):
    spreadsheet_id = '1hG7Fsf8Uk9CDZ-OOP4OKUvcAr4URF0ZMPvyhgImRMV0'
    sheet_name = 'Main'
    telegram_username = f'@{message.from_user.username}'

    sent_message = bot.send_message(message.chat.id, 'üîç –ü–æ—à—É–∫ –≤–∞—à–æ–≥–æ –ø–∞—Ä–æ–ª—è...')

    user_data = read_credentials_from_sheet(spreadsheet_id, sheet_name, telegram_username)
    if user_data:
        message_text = ''
        for i, (key, value) in enumerate(user_data.items()):
            message_text += f'{key}: <code>{value}</code>\n'
            if i % 2 == 1:
                message_text += '\n'
    else:
        message_text = '–í–∞—à—ñ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'

    sent_message = bot.edit_message_text(message_text, message.chat.id, sent_message.message_id, parse_mode='HTML')
    sleep(30)
    bot.delete_message(message.chat.id, sent_message.id)


@bot.message_handler(func=lambda message: message.text not in button_names and process_in_progress.get(
    message.chat.id) == 'mass_message')
@authorized_only(user_type='admins')
def proceed_mass_message(message):
    with DatabaseConnection() as (conn, cursor):
        cursor.execute('SELECT telegram_user_id FROM employees')
        employees = cursor.fetchall()
    for employee in employees:
        try:
            bot.send_message(employee[0], message.text)
        except Exception as e:
            print(e)
    bot.send_message(message.chat.id, '‚úîÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ.')
    del process_in_progress[message.chat.id]


@bot.message_handler(func=lambda message: message.text in old_button_names)
@authorized_only(user_type='users')
def old_button_handler(message):
    bot.send_message(message.chat.id, '–¶—è –∫–Ω–æ–ø–∫–∞ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ –∞–±–æ –∑–∞–º—ñ–Ω–µ–Ω–∞.'
                                      '\n–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂—á–µ.',
                     reply_markup=main_menu)


@bot.message_handler(commands=['approve_commendations'])
@authorized_only(user_type='moderators')
def approve_commendations_handler(message):
    markup = InlineKeyboardMarkup()
    confirm_btn = types.InlineKeyboardButton(text='‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data='confirmmod_approve')
    cancel_btn = types.InlineKeyboardButton(text='‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='cancelmod_approve')
    markup.add(confirm_btn, cancel_btn)
    bot.send_message(
        message.chat.id,
        '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–¥—è–∫?'
        '\n–í—Å—ñ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ –ø–æ–¥—è–∫–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.'
        '\n–í—Å—ñ –Ω–µ–∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ –ø–æ–¥—è–∫–∏ –±—É–¥—É—Ç—å –±–µ–∑–ø–æ–≤–æ—Ä–æ—Ç–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ.',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'confirmmod_approve')
@authorized_only(user_type='moderators')
def confirm_approve_commendations_handler(call):
    sheet_id = '15_V8Z7fW-KP56dwpqbe0osjlJpldm6R5-bnUoBEgM1I'
    approve_and_parse_to_database(sheet_id, 'COMMENDATIONS TO BE MODERATED',
                                  DatabaseConnection)
    bot.edit_message_text('‚úîÔ∏è –ü–æ–¥—è–∫–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.',
                          call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == 'cancelmod_approve')
@authorized_only(user_type='moderators')
def cancel_approve_commendations_handler(call):
    bot.edit_message_text('‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–¥—è–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', call.message.chat.id, call.message.message_id)
